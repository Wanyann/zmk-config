#include <dt-bindings/zmk/behaviors.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    hold-trigger-on-release;
    tapping-term-ms = <180>;
};

&lt { flavor = "balanced"; };

&caps_word { continue-list = <MINUS SEMICOLON UNDERSCORE SINGLE_QUOTE LEFT_BRACKET RIGHT_BRACKET COMMA DOT GRAVE BACKSPACE DELETE>; };

&sl { release-after-ms = <5000>; };

&sk {
    release-after-ms = <5000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_ctrl_ent {
            bindings = <&kp LC(ENTER)>;
            key-positions = <4 2>;
            require-prior-idle-ms = <50>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <2 3>;
            require-prior-idle-ms = <50>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            require-prior-idle-ms = <50>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <26 27>;
            require-prior-idle-ms = <50>;
        };

        combo_ru {
            bindings = <&lg_ru>;
            key-positions = <28 27>;
            require-prior-idle-ms = <50>;
        };

        combo_en {
            bindings = <&lg_en>;
            key-positions = <31 32>;
            require-prior-idle-ms = <50>;
        };

        combo_osl_sym_en {
            bindings = <&sl 7>;
            key-positions = <20 19>;
            require-prior-idle-ms = <50>;
            layers = <0 4>;
        };

        combo_question_en {
            bindings = <&kp QUESTION>;
            require-prior-idle-ms = <50>;
            key-positions = <3 4>;
            layers = <0>;
        };

        combo_quote_en {
            bindings = <&kp DOUBLE_QUOTES>;
            require-prior-idle-ms = <50>;
            key-positions = <31 33>;
            layers = <0>;
        };

        combo_osl_sym_ru {
            bindings = <&sl 10>;
            key-positions = <19 20>;
            require-prior-idle-ms = <50>;
            layers = <1 4>;
        };

        combo_question_ru {
            bindings = <&kp LS(N7)>;
            key-positions = <4 3>;
            require-prior-idle-ms = <50>;
            layers = <1>;
        };

        combo_quote_ru {
            bindings = <&kp LS(NUMBER_2)>;
            key-positions = <31 33>;
            require-prior-idle-ms = <50>;
            layers = <1>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <19 21>;
            require-prior-idle-ms = <50>;
        };

        combo_yi_ru {
            bindings = <&kp Q>;
            key-positions = <21 20>;
            layers = <1>;
            require-prior-idle-ms = <50>;
        };

        combo_she_ru {
            bindings = <&kp I>;
            key-positions = <32 33>;
            layers = <1>;
            require-prior-idle-ms = <50>;
        };

        combo_scha_ru {
            bindings = <&kp O>;
            key-positions = <8 9>;
            require-prior-idle-ms = <50>;
            layers = <1>;
        };

        combo_underscore {
            bindings = <&kp UNDER>;
            key-positions = <16 19>;
            require-prior-idle-ms = <50>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <13 14>;
            require-prior-idle-ms = <50>;
        };

        combo_osl_fn {
            bindings = <&sl 8>;
            key-positions = <26 28>;
            require-prior-idle-ms = <50>;
        };

        combo_osl_os {
            bindings = <&sl 9>;
            key-positions = <25 26>;
            require-prior-idle-ms = <50>;
        };

        combo_flash_left {
            bindings = <&bootloader>;
            key-positions = <12 24 0>;
        };

        combo_flash_right {
            bindings = <&bootloader>;
            key-positions = <11 23 35>;
        };

        combo_left_reset {
            bindings = <&sys_reset>;
            key-positions = <36 37>;
        };

        combo_right_reset {
            bindings = <&sys_reset>;
            key-positions = <44 45>;
        };
    };

    macros {
        lg_ru: lg_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &os_ru>;
            label = "LG_RU";
        };

        lg_en: lg_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &os_en>;
            label = "LG_EN";
        };

        mod_layer: mod_layer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 2>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 2>;

            label = "MOD_LAYER";
        };

        cw_off: capsword_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LOCKING_CAPS>;
            label = "CAPSWORD_OFF";
            tap-ms = <0>;
        };

        en_code: en_code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp RETURN &kp RET>,
                <&macro_wait_time 10>,
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp UP_ARROW>;

            label = "EN_CODE_BLOCK";
        };

        en_number: en_number {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_ru>,
                <&macro_wait_time 10>,
                <&kp LS(N5)>,
                <&macro_wait_time 10>,
                <&lg_en>;

            label = "EN_NUMBER";
        };

        ru_at: ru_at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp AT>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_AT";
        };

        ru_tilde: ru_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp TILDE>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_TILDE";
        };

        ru_caret: ru_cap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp CARET>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_CAP";
        };

        ru_grave: ru_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp GRAVE>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_GRAVE";
        };

        ru_code: ru_code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp RETURN &kp RET>,
                <&macro_wait_time 10>,
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp UP_ARROW>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_CODE";
        };

        ru_and: ru_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp AMPERSAND>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_AND";
        };

        ru_single_quote: ru_single_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp SINGLE_QUOTE>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_SINGLE_QUOTE";
        };

        ru_left_bracket: ru_left_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp LEFT_BRACKET>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_LEFT_BRACKET";
            tap-ms = <0>;
        };

        ru_right_bracket: ru_rt_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp RIGHT_BRACKET>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_RT_BRACKET";
        };

        ru_left_brace: ru_left_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp LEFT_BRACE>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_LEFT_BRACE";
        };

        ru_right_brace: ru_right_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp LEFT_BRACE>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_RIGHT_BRACE";
        };

        ru_semicolon: ru_semicolon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp SEMICOLON>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_SEMICOLON";
        };

        ru_hash: ru_hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp HASH>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_HASH";
        };

        ru_pipe: ru_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp HASH>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_PIPE";
        };

        ru_less: ru_less {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp LESS_THAN>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_LESS";
        };

        ru_greater: ru_greater {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp GREATER_THAN>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_GREATER";
        };

        ru_dollar: ru_dollar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&lg_en>,
                <&macro_wait_time 10>,
                <&kp GREATER_THAN>,
                <&macro_wait_time 10>,
                <&lg_ru>;

            label = "RU_DOLLAR";
        };

        os_ru: os_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_3))>;
            label = "OS_RU";
        };

        os_en: os_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_4))>;
            label = "OS_EN";
        };

        macro_ctrl_L: macro_ctrl_L {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&lg_en &kp LC(L) &lg_ru>;
            label = "MACRO_CTRL_L";
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_wait_time 30>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_wait_time 30>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "ALT_TAB";
        };

        select_row: select_row {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "SELECT_ROW";
        };
    };

    behaviors {
        mlt: mlt {
            compatible = "zmk,behavior-hold-tap";
            label = "Mod Layer/Tap";
            bindings = <&mod_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        layer_off: layer_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "LAYER_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&none  &kp Q            &mt LC(W) W      &kp E                  &mt LC(R) R   &mt LC(T) T                                       &kp Y            &kp U         &kp I      &kp O    &kp P                &none
&none  &hrm LEFT_GUI A  &hrm LEFT_ALT S  &hrm LC(LEFT_SHIFT) D  &hrm LCTRL F  &mt LC(F) G                                       &kp H            &hrm LCTRL J  &lt 5 K    &kp L    &hrm RALT SEMI       &none
&none  &mt LC(Z) Z      &mt LC(X) X      &mt LC(C) C            &mt LC(V) V   &mt LS(LA(LC(LG(V)))) B                           &kp N            &kp M         &kp COMMA  &kp DOT  &mt LC(SLASH) SLASH  &none
                        &none            &none                  &cw_off       &lt 4 SPACE              &sl 6    &sk LEFT_SHIFT  &lt 5 BACKSPACE  &to 4         &none      &none
            >;

            label = "Base";
        };

        Diktor {
            bindings = <
&trans  &kp W        &mt LC(W) M             &kp Z                   &mt LC(R) LS(SLASH)  &mt LC(T) SLASH                              &kp P      &kp D         &kp R    &kp L          &kp X            &trans
&none   &mlt LGUI E  &mlt LALT B             &mlt LS(LCTRL) T        &mlt LCTRL J         &mt LC(F) F                                  &kp K      &mlt LCTRL Y  &lt 5 N  &kp C          &mlt RALT H      &trans
&trans  &mt LC(Z) A  &mt LC(X) SINGLE_QUOTE  &mt LC(C) LEFT_BRACKET  &mt LC(V) S          &mt LS(LA(LC(LG(V)))) DOT                    &kp COMMA  &kp V         &kp G    &kp SEMICOLON  &mt LC(SLASH) U  &trans
                     &trans                  &trans                  &trans               &trans                     &trans    &trans  &trans     &trans        &trans   &trans
            >;

            label = "Diktor";
        };

        Mods {
            bindings = <
&trans  &kp Q       &kp W       &kp E            &kp R        &kp T                     &kp Y   &kp U        &kp I      &kp O    &kp P                   &trans
&trans  &mt LGUI A  &mt LALT S  &mt LS(LCTRL) D  &mt LCTRL F  &kp G                     &kp H   &mt LCTRL J  &kp K      &kp L    &mt LS(RALT) SEMICOLON  &trans
&trans  &kp Z       &kp X       &kp C            &kp V        &kp B                     &kp N   &kp M        &kp COMMA  &kp DOT  &kp SLASH               &trans
                    &trans      &trans           &trans       &trans  &trans    &trans  &trans  &trans       &trans     &trans
            >;

            label = "Mods";
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            label = "Mouse";
        };

        Navigation {
            bindings = <
&trans  &alt_tab                    &kp LS(LA(LC(LG(TAB))))          &trans            &kp LS(LC(LA(LG(F1))))  &trans                    &kp GRAVE  &kp HOME  &kp UP    &kp END    &trans       &trans
&trans  &kp LC(LEFT_BRACKET)        &kp LC(RIGHT_BRACKET)            &kp LSHFT         &kp LCTRL               &trans                    &trans     &kp LEFT  &kp DOWN  &kp RIGHT  &select_row  &trans
&trans  &mt LC(Z) LS(LEFT_BRACKET)  &mt LC(X) LS(LG(RIGHT_BRACKET))  &mt LC(C) LS(F6)  &mt LC(V) LS(LC(V))     &trans                    &trans     &trans    &none     &none      &trans       &trans
                                    &trans                           &trans            &trans                  &trans  &trans    &trans  &trans     &trans    &trans    &trans
            >;

            label = "Navigation";
        };

        Numbers {
            bindings = <
&trans  &trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans                           &trans  &trans     &trans      &trans  &trans  &trans
&trans  &kp MINUS     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL                        &trans  &kp LCTRL  &kp LSHIFT  &trans  &trans  &trans
&trans  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH                    &trans  &trans     &trans      &trans  &trans  &trans
                      &trans        &trans        &trans        &kp LA(SPACE)  &trans    &trans  &trans  &trans     &trans      &trans
            >;

            label = "User1";
        };

        App {
            bindings = <
&kp LS(LA(LC(LEFT_BRACKET)))   &kp LS(LA(LC(Q)))  &kp LS(LA(LC(W)))  &kp LS(LA(LC(E)))  &kp LS(LA(LC(R)))  &kp LS(LA(LC(T)))                  &kp LS(LA(LC(Y)))  &kp LS(LA(LC(U)))  &kp LS(LA(LC(I)))      &kp LS(LA(LC(O)))    &kp LS(LA(LC(P)))          &bt BT_SEL 2
&kp LS(LA(LC(N)))              &kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(D)))  &kp LS(LA(LC(F)))  &kp LS(LA(LC(G)))                  &kp LS(LA(LC(H)))  &kp LS(LA(LC(J)))  &kp LS(LA(LC(K)))      &kp LS(LA(LC(L)))    &kp LS(LA(LC(SEMICOLON)))  &bt BT_SEL 1
&kp LS(LA(LC(RIGHT_BRACKET)))  &kp LS(LC(LA(Z)))  &kp LS(LA(LC(X)))  &kp LS(LA(LC(C)))  &kp LA(LS(LC(V)))  &kp LS(LA(LC(B)))                  &kp LS(LA(LC(N)))  &kp LS(LC(LA(M)))  &kp LS(LA(LC(COMMA)))  &kp LS(LA(LC(DOT)))  &kp LS(LC(LA(SLASH)))      &bt BT_CLR_ALL
                                                  &trans             &trans             &layer_off 6       &none              &sl 6    &none  &none              &none              &trans                 &trans
            >;

            label = "User2";
        };

        EnSym {
            bindings = <
&trans  &trans     &kp AT                &kp UNDER  &kp COLON              &kp GRAVE                    &kp SINGLE_QUOTE  &kp LEFT_BRACKET  &kp HASH       &kp RIGHT_BRACKET  &trans    &trans
&trans  &kp TILDE  &kp LEFT_PARENTHESIS  &kp EXCL   &kp RIGHT_PARENTHESIS  &kp PLUS                     &en_number        &kp LEFT_BRACE    &kp SEMICOLON  &kp RIGHT_BRACE    &kp PIPE  &trans
&trans  &trans     &kp ASTRK             &kp CARET  &kp PERCENT            &en_code                     &kp AMPERSAND     &kp LESS_THAN     &kp DOLLAR     &kp GREATER_THAN   &trans    &trans
                   &trans                &trans     &layer_off 7           &trans     &trans    &trans  &trans            &trans            &trans         &trans
            >;

            label = "EnSym";
        };

        Fn {
            bindings = <
&trans  &trans   &kp F7  &kp F8  &kp F9        &trans                        &trans  &trans     &trans         &trans    &trans        &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6        &kp F12                       &trans  &kp LCTRL  &kp LS(LCTRL)  &kp LALT  &kp LEFT_GUI  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3        &trans                        &trans  &trans     &trans         &trans    &trans        &trans
                 &trans  &trans  &layer_off 8  &trans   &trans    &sk LSHFT  &trans  &trans     &trans         &trans
            >;
        };

        OS {
            bindings = <
&studio_unlock  &trans        &trans          &kp LA(LC(N2))    &kp LC(LA(NUMBER_3))  &kp LC(LA(NUMBER_4))                    &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 0    &kp LC(LEFT)  &kp LC(RIGHT)   &kp K_PLAY_PAUSE  &kp C_VOLUME_UP       &kp C_BRI_UP                            &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 1    &trans        &trans          &trans            &kp C_VOL_DN          &kp C_BRI_DN                            &trans  &trans  &trans  &trans  &trans  &trans
                              &bt BT_CLR_ALL  &trans            &layer_off 9          &trans                &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        RuSym {
            bindings = <
&trans  &trans     &ru_at                &kp UNDER  &kp LS(N6)     &ru_grave                    &ru_single_quote  &ru_left_bracket  &ru_hash       &ru_right_bracket  &trans    &trans
&trans  &ru_tilde  &kp LEFT_PARENTHESIS  &kp EXCL   &kp RPAR       &kp PLUS                     &kp LS(N5)        &ru_left_brace    &ru_semicolon  &ru_right_brace    &ru_pipe  &trans
&trans  &trans     &kp ASTERISK          &ru_caret  &kp PERCENT    &ru_code                     &ru_and           &ru_less          &ru_dollar     &ru_greater        &trans    &trans
                   &trans                &trans     &layer_off 10  &trans     &trans    &trans  &trans            &trans            &trans         &trans
            >;
        };

        layer_11 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_12 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        MouseMods {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_14 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_15 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_16 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
